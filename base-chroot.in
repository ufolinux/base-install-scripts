#!/bin/bash

shopt -s extglob

m4_include(common)

setup=chroot_setup
unshare=0

usage() {
  cat <<EOF
usage: ${0##*/} chroot-dir [command] [arguments...]

    -h                  Print this help message
    -N                  Run in unshare mode as a regular user
    -u <user>[:group]   Specify non-root user and optional group to use

If 'command' is unspecified, ${0##*/} will launch /bin/bash.

Note that when using base-chroot, the target chroot directory *should* be a
mountpoint. This ensures that tools such as kepler(8) or findmnt(8) have an
accurate hierarchy of the mounted filesystems within the chroot.

If your chroot target is not a mountpoint, you can bind mount the directory on
itself to make it a mountpoint, i.e. 'mount --bind /your/chroot /your/chroot'.

EOF
}

resolve_link() {
  local target=$1
  local root=$2

  # If a root was given, make sure it ends in a slash.
  [[ -n $root && $root != */ ]] && root=$root/

  while [[ -L $target ]]; do
    target=$(readlink -m "$target")
    # If a root was given, make sure the target is under it.
    # Make sure to strip any leading slash from target first.
    [[ -n $root && $target != $root* ]] && target=$root${target#/}
  done

  printf %s "$target"
}

chroot_add_resolv_conf() {
  local chrootdir=$1
  local src=$(resolve_link /etc/resolv.conf)
  local dest=$(resolve_link "$chrootdir/etc/resolv.conf" "$chrootdir")

  # If we don't have a source resolv.conf file, there's nothing useful we can do.
  [[ -e $src ]] || return 0

  if [[ ! -e $dest ]]; then
    # There are two reasons the destination might not exist:
    #
    #   1. There may be no resolv.conf in the chroot.  In this case, $dest won't exist,
    #      and it will be equal to $1/etc/resolv.conf.  In this case, we'll just exit.
    #      The chroot environment must not be concerned with DNS resolution.
    #
    #   2. $1/etc/resolv.conf is (or resolves to) a broken link.  The environment
    #      clearly intends to handle DNS resolution, but something's wrong.  Maybe it
    #      normally creates the target at boot time.  We'll (try to) take care of it by
    #      creating a dummy file at the target, so that we have something to bind to.

    # Case 1.
    [[ $dest = $chrootdir/etc/resolv.conf ]] && return 0

    # Case 2.
    install -Dm644 /dev/null "$dest" || return 1
  fi

  chroot_add_mount "$src" "$dest" --bind
}

while getopts ':hNu:' flag; do
  case $flag in
    h)
      usage
      exit 0
      ;;
    N)
      setup=unshare_setup
      unshare=1
      ;;
    u)
      userspec=$OPTARG
      ;;
    :)
      die '%s: option requires an argument -- '\''%s'\' "${0##*/}" "$OPTARG"
      ;;
    ?)
      die '%s: invalid option -- '\''%s'\' "${0##*/}" "$OPTARG"
      ;;
  esac
done
shift $(( OPTIND - 1 ))

(( $# )) || die 'No chroot directory specified'
chrootdir=$1
shift

base-chroot() {
  (( EUID == 0 )) || die 'This script must be run with root privileges'

  [[ -d $chrootdir ]] || die "Can't create chroot on non-directory %s" "$chrootdir"

  $setup "$chrootdir" || die "failed to setup chroot %s" "$chrootdir"
  chroot_add_resolv_conf "$chrootdir" || die "failed to setup resolv.conf"

  if ! mountpoint -q "$chrootdir"; then
    warning "$chrootdir is not a mountpoint. This may have undesirable side effects."
  fi

  chroot_args=()
  [[ $userspec ]] && chroot_args+=(--userspec "$userspec")

  SHELL=/bin/bash $pid_unshare chroot "${chroot_args[@]}" -- "$chrootdir" "${args[@]}"
}

args=("$@")
if (( unshare )); then
  $mount_unshare bash -c "$(declare_all); base-chroot"
else
  base-chroot
fi
